// --- Путь: src/hooks/admin/RouteCategories/useRouteCategoriesManagement.ts ---

import { useState, useEffect, useCallback } from 'react';
import type { RouteCategory } from '../../../types/admin/RouteCategories/routeCategory.types';
import { RouteCategoriesApi } from '../../../services/admin/RouteCategories/routeCategoriesApi';

export const useRouteCategoriesManagement = () => {
  // --- Состояние для данных ---
  const [categories, setCategories] = useState<RouteCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // --- Состояние для модального окна формы ---
  const [showForm, setShowForm] = useState(false);
  const [categoryToEdit, setCategoryToEdit] = useState<RouteCategory | null>(null);

  // --- Функция загрузки данных с бэка ---
  const fetchCategories = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      // Бэк не поддерживает пагинацию, загружаем все
      const data = await RouteCategoriesApi.getRouteCategories();
      setCategories(data);
    } catch (err: any) {
      let errorMessage = 'Ошибка загрузки категорий.';
      if (err.response?.data?.detail) {
        const detail = err.response.data.detail;
        errorMessage = typeof detail === 'object' ? JSON.stringify(detail, null, 2) : String(detail);
      }
      setError(errorMessage);
      setCategories([]);
    } finally {
      setLoading(false);
    }
  }, []);

  // Эффект, который вызывает загрузку при первом рендере
  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);
  
  // --- Обработчики действий пользователя ---

  const handleEdit = (category: RouteCategory) => {
    if (category.id === 1) {
      alert("Категорию 'Autogenerated' редактировать нельзя.");
      return;
    }
    setCategoryToEdit(category);
    setShowForm(true);
  };

  const handleShowAddForm = () => {
    setCategoryToEdit(null);
    setShowForm(true);
  };

  const handleDelete = async (id: number) => {
    if (id === 1) {
      alert("Категорию 'Autogenerated' удалять нельзя.");
      return;
    }
    if (!window.confirm('Вы уверены, что хотите удалить эту категорию?')) return;
    
    const originalCategories = [...categories];
    setCategories(items => items.filter(item => item.id !== id));

    try {
      await RouteCategoriesApi.deleteRouteCategory(id);
    } catch (err: any) {
      const detail = err.response?.data?.detail;
      setError(detail || 'Ошибка удаления категории.');
      setCategories(originalCategories); // Возвращаем список в исходное состояние при ошибке
    }
  };

  // Вызывается после успешного сохранения формы
  const handleFormSuccess = () => {
    setShowForm(false);
    setCategoryToEdit(null);
    // Просто перезагружаем весь список, т.к. пагинации нет
    fetchCategories();
  };
  
  // --- Возвращаем всё, что нужно для UI-компонентов ---
  return {
    categories,
    loading,
    error,
    handleEdit,
    handleShowAddForm,
    handleDelete,
    handleFormSuccess,
    showForm,
    setShowForm,
    categoryToEdit,
  };
};